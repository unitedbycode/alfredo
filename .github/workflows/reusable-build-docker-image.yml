name: Reusable Build Docker Image

on:
  workflow_call:
    inputs:
      context:
        type: string
        required: true
      dockerfile:
        type: string
        required: true
      username:
        type: string
        required: true
      image_name:
        type: string
        required: true
      platforms:
        type: string
        required: false
        default: linux/amd64,linux/arm64

env:
  REGISTRY: ghcr.io

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables for later
        run: |
          echo "Set up environment variables for later"
          id -u
          id -g
          echo "WWWGROUP=$(id -g)" >> $GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ inputs.username }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: |
            /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ inputs.image_name }}-${{ hashFiles(inputs.dockerfile) }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ inputs.image_name }}-
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ inputs.image_name }}
          flavor: |
            latest=true
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD-HHmmss' tz='UTC'}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=sha
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ inputs.platforms }}
          file: ${{ inputs.dockerfile }}
          build-args: |
            WWWGROUP=${{ env.WWWGROUP }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            type=local,dest=/tmp/.buildx-cache
