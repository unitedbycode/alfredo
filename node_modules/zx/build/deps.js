// src/deps.ts
import { $ } from "./core.js";
import { spinner } from "./goods.js";
import { depseek } from "./vendor.js";
async function installDeps(dependencies, prefix) {
  const packages = Object.entries(dependencies).map(
    ([name, version]) => `${name}@${version}`
  );
  const flags = prefix ? `--prefix=${prefix}` : "";
  if (packages.length === 0) {
    return;
  }
  await spinner(
    `npm i ${packages.join(" ")}`,
    () => $`npm install --no-save --no-audit --no-fund ${flags} ${packages}`.nothrow()
  );
}
var builtins = /* @__PURE__ */ new Set([
  "_http_agent",
  "_http_client",
  "_http_common",
  "_http_incoming",
  "_http_outgoing",
  "_http_server",
  "_stream_duplex",
  "_stream_passthrough",
  "_stream_readable",
  "_stream_transform",
  "_stream_wrap",
  "_stream_writable",
  "_tls_common",
  "_tls_wrap",
  "assert",
  "async_hooks",
  "buffer",
  "child_process",
  "cluster",
  "console",
  "constants",
  "crypto",
  "dgram",
  "dns",
  "domain",
  "events",
  "fs",
  "http",
  "http2",
  "https",
  "inspector",
  "module",
  "net",
  "os",
  "path",
  "perf_hooks",
  "process",
  "punycode",
  "querystring",
  "readline",
  "repl",
  "stream",
  "string_decoder",
  "sys",
  "timers",
  "tls",
  "trace_events",
  "tty",
  "url",
  "util",
  "v8",
  "vm",
  "wasi",
  "worker_threads",
  "zlib"
]);
var nameRe = /^(?<name>(@[a-z0-9-~][a-z0-9-._~]*\/)?[a-z0-9-~][a-z0-9-._~]*)\/?.*$/i;
var versionRe = /^@(?<version>[~^]?(v?[\dx*]+([-.][\d*a-z-]+)*))/i;
function parseDeps(content) {
  return depseek(content.toString() + "\n", { comments: true }).reduce((m, { type, value }, i, list) => {
    if (type === "dep") {
      const meta = list[i + 1];
      const name = parsePackageName(value);
      const version = meta?.type === "comment" && parseVersion(meta?.value.trim()) || "latest";
      if (name)
        m[name] = version;
    }
    return m;
  }, {});
}
function parsePackageName(path) {
  if (!path)
    return;
  const name = nameRe.exec(path)?.groups?.name;
  if (name && !builtins.has(name)) {
    return name;
  }
}
function parseVersion(line) {
  return versionRe.exec(line)?.groups?.version || "latest";
}
export {
  installDeps,
  parseDeps
};
