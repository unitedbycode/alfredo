// src/core.ts
import assert from "node:assert";
import { spawn, spawnSync } from "node:child_process";
import { AsyncLocalStorage, createHook } from "node:async_hooks";
import { inspect } from "node:util";
import {
  exec,
  buildCmd,
  chalk,
  which,
  ps
} from "./vendor.js";
import {
  errnoMessage,
  exitCodeInfo,
  formatCmd,
  getCallerLocation,
  noop,
  parseDuration,
  quote,
  quotePowerShell,
  noquote
} from "./util.js";
var processCwd = Symbol("processCwd");
var syncExec = Symbol("syncExec");
var storage = new AsyncLocalStorage();
var cwdSyncHook = createHook({
  init: syncCwd,
  before: syncCwd,
  promiseResolve: syncCwd,
  after: syncCwd,
  destroy: syncCwd
});
function syncProcessCwd(flag = true) {
  if (flag)
    cwdSyncHook.enable();
  else
    cwdSyncHook.disable();
}
var defaults = {
  [processCwd]: process.cwd(),
  [syncExec]: false,
  verbose: false,
  env: process.env,
  sync: false,
  shell: true,
  stdio: ["inherit", "pipe", "pipe"],
  nothrow: false,
  quiet: false,
  prefix: "",
  postfix: "",
  quote: noquote,
  detached: false,
  spawn,
  spawnSync,
  log,
  kill
};
function usePowerShell() {
  $.shell = which.sync("powershell.exe");
  $.prefix = "";
  $.postfix = "; exit $LastExitCode";
  $.quote = quotePowerShell;
}
function useBash() {
  $.shell = which.sync("bash");
  $.prefix = "set -euo pipefail;";
  $.quote = quote;
}
function checkShell() {
  if (!$.shell) {
    throw new Error(`shell is not available: setup guide goes here`);
  }
}
function getStore() {
  return storage.getStore() || defaults;
}
var $ = new Proxy(
  function(pieces, ...args) {
    checkShell();
    if (!Array.isArray(pieces)) {
      return function(...args2) {
        const self = this;
        return within(() => {
          return Object.assign($, pieces).apply(self, args2);
        });
      };
    }
    const from = getCallerLocation();
    if (pieces.some((p) => p == void 0)) {
      throw new Error(`Malformed command at ${from}`);
    }
    let resolve, reject;
    const promise = new ProcessPromise((...args2) => [resolve, reject] = args2);
    const cmd = buildCmd(
      $.quote,
      pieces,
      args
    );
    const snapshot = getStore();
    const sync = snapshot[syncExec];
    const callback = () => promise.isHalted || promise.run();
    promise._bind(
      cmd,
      from,
      resolve,
      (v) => {
        reject(v);
        if (sync)
          throw v;
      },
      snapshot
    );
    sync ? callback() : setImmediate(callback);
    return sync ? promise.output : promise;
  },
  {
    set(_, key, value) {
      const target = key in Function.prototype ? _ : getStore();
      Reflect.set(target, key === "sync" ? syncExec : key, value);
      return true;
    },
    get(_, key) {
      if (key === "sync")
        return $({ sync: true });
      const target = key in Function.prototype ? _ : getStore();
      return Reflect.get(target, key);
    }
  }
);
try {
  useBash();
} catch (err) {
}
var ProcessPromise = class _ProcessPromise extends Promise {
  constructor() {
    super(...arguments);
    this._command = "";
    this._from = "";
    this._resolve = noop;
    this._reject = noop;
    this._snapshot = getStore();
    this._timeoutSignal = "SIGTERM";
    this._resolved = false;
    this._halted = false;
    this._piped = false;
    this._zurk = null;
    this._output = null;
    this._prerun = noop;
    this._postrun = noop;
  }
  _bind(cmd, from, resolve, reject, options) {
    this._command = cmd;
    this._from = from;
    this._resolve = resolve;
    this._reject = reject;
    this._snapshot = { ...options };
  }
  run() {
    if (this.child)
      return this;
    this._prerun();
    const $2 = this._snapshot;
    const self = this;
    const input = $2.input?.stdout ?? $2.input;
    if (input)
      this.stdio("pipe");
    $2.log({
      kind: "cmd",
      cmd: this._command,
      verbose: self.isVerbose()
    });
    this._zurk = exec({
      input,
      cmd: $2.prefix + self._command + $2.postfix,
      cwd: $2.cwd ?? $2[processCwd],
      ac: $2.ac,
      signal: $2.signal,
      shell: typeof $2.shell === "string" ? $2.shell : true,
      env: $2.env,
      spawn: $2.spawn,
      spawnSync: $2.spawnSync,
      stdio: self._stdio ?? $2.stdio,
      sync: $2[syncExec],
      detached: $2.detached,
      run: (cb) => cb(),
      on: {
        start: () => {
          if (self._timeout) {
            const t = setTimeout(
              () => self.kill(self._timeoutSignal),
              self._timeout
            );
            self.finally(() => clearTimeout(t)).catch(noop);
          }
        },
        stdout: (data) => {
          if (self._piped)
            return;
          $2.log({ kind: "stdout", data, verbose: self.isVerbose() });
        },
        stderr: (data) => {
          $2.log({ kind: "stderr", data, verbose: !self.isQuiet() });
        },
        end: ({ error, stdout, stderr, stdall, status, signal }) => {
          self._resolved = true;
          if (error) {
            const message = ProcessOutput.getErrorMessage(error, self._from);
            const output = new ProcessOutput(
              null,
              null,
              stdout,
              stderr,
              stdall,
              message
            );
            self._output = output;
            self._reject(output);
          } else {
            const message = ProcessOutput.getExitMessage(
              status,
              signal,
              stderr,
              self._from
            );
            const output = new ProcessOutput(
              status,
              signal,
              stdout,
              stderr,
              stdall,
              message
            );
            self._output = output;
            if (status === 0 || (self._nothrow ?? $2.nothrow)) {
              self._resolve(output);
            } else {
              self._reject(output);
            }
          }
        }
      }
    });
    this._postrun();
    return this;
  }
  get child() {
    return this._zurk?.child;
  }
  get stdin() {
    this.stdio("pipe");
    this.run();
    assert(this.child);
    if (this.child.stdin == null)
      throw new Error("The stdin of subprocess is null.");
    return this.child.stdin;
  }
  get stdout() {
    this.run();
    assert(this.child);
    if (this.child.stdout == null)
      throw new Error("The stdout of subprocess is null.");
    return this.child.stdout;
  }
  get stderr() {
    this.run();
    assert(this.child);
    if (this.child.stderr == null)
      throw new Error("The stderr of subprocess is null.");
    return this.child.stderr;
  }
  get exitCode() {
    return this.then(
      (p) => p.exitCode,
      (p) => p.exitCode
    );
  }
  then(onfulfilled, onrejected) {
    if (this.isHalted && !this.child) {
      throw new Error("The process is halted!");
    }
    return super.then(onfulfilled, onrejected);
  }
  catch(onrejected) {
    return super.catch(onrejected);
  }
  pipe(dest) {
    if (typeof dest == "string")
      throw new Error("The pipe() method does not take strings. Forgot $?");
    if (this._resolved) {
      if (dest instanceof _ProcessPromise)
        dest.stdin.end();
      throw new Error(
        "The pipe() method shouldn't be called after promise is already resolved!"
      );
    }
    this._piped = true;
    if (dest instanceof _ProcessPromise) {
      dest.stdio("pipe");
      dest._prerun = this.run.bind(this);
      dest._postrun = () => {
        if (!dest.child)
          throw new Error(
            "Access to stdin of pipe destination without creation a subprocess."
          );
        this.stdout.pipe(dest.stdin);
      };
      return dest;
    } else {
      this._postrun = () => this.stdout.pipe(dest);
      return this;
    }
  }
  abort(reason) {
    if (!this.child)
      throw new Error("Trying to abort a process without creating one.");
    this._zurk?.ac.abort(reason);
  }
  async kill(signal = "SIGTERM") {
    if (!this.child)
      throw new Error("Trying to kill a process without creating one.");
    if (!this.child.pid)
      throw new Error("The process pid is undefined.");
    return $.kill(this.child.pid, signal);
  }
  stdio(stdin, stdout = "pipe", stderr = "pipe") {
    this._stdio = [stdin, stdout, stderr];
    return this;
  }
  nothrow() {
    this._nothrow = true;
    return this;
  }
  quiet() {
    this._quiet = true;
    return this;
  }
  isQuiet() {
    return this._quiet ?? this._snapshot.quiet;
  }
  isVerbose() {
    return this._snapshot.verbose && !this.isQuiet();
  }
  timeout(d, signal = "SIGTERM") {
    this._timeout = parseDuration(d);
    this._timeoutSignal = signal;
    return this;
  }
  halt() {
    this._halted = true;
    return this;
  }
  get isHalted() {
    return this._halted;
  }
  get output() {
    return this._output;
  }
};
var ProcessOutput = class extends Error {
  constructor(code, signal, stdout, stderr, combined, message) {
    super(message);
    this._code = code;
    this._signal = signal;
    this._stdout = stdout;
    this._stderr = stderr;
    this._combined = combined;
  }
  toString() {
    return this._combined;
  }
  valueOf() {
    return this._combined.trim();
  }
  get stdout() {
    return this._stdout;
  }
  get stderr() {
    return this._stderr;
  }
  get exitCode() {
    return this._code;
  }
  get signal() {
    return this._signal;
  }
  static getExitMessage(code, signal, stderr, from) {
    let message = `exit code: ${code}`;
    if (code != 0 || signal != null) {
      message = `${stderr || "\n"}    at ${from}`;
      message += `
    exit code: ${code}${exitCodeInfo(code) ? " (" + exitCodeInfo(code) + ")" : ""}`;
      if (signal != null) {
        message += `
    signal: ${signal}`;
      }
    }
    return message;
  }
  static getErrorMessage(err, from) {
    return `${err.message}
    errno: ${err.errno} (${errnoMessage(err.errno)})
    code: ${err.code}
    at ${from}`;
  }
  [inspect.custom]() {
    let stringify = (s, c) => s.length === 0 ? "''" : c(inspect(s));
    return `ProcessOutput {
  stdout: ${stringify(this.stdout, chalk.green)},
  stderr: ${stringify(this.stderr, chalk.red)},
  signal: ${inspect(this.signal)},
  exitCode: ${(this.exitCode === 0 ? chalk.green : chalk.red)(this.exitCode)}${exitCodeInfo(this.exitCode) ? chalk.grey(" (" + exitCodeInfo(this.exitCode) + ")") : ""}
}`;
  }
};
function within(callback) {
  return storage.run({ ...getStore() }, callback);
}
function syncCwd() {
  if ($[processCwd] != process.cwd())
    process.chdir($[processCwd]);
}
function cd(dir) {
  if (dir instanceof ProcessOutput) {
    dir = dir.toString().trim();
  }
  $.log({ kind: "cd", dir });
  process.chdir(dir);
  $[processCwd] = process.cwd();
}
async function kill(pid, signal) {
  let children = await ps.tree({ pid, recursive: true });
  for (const p of children) {
    try {
      process.kill(+p.pid, signal);
    } catch (e) {
    }
  }
  try {
    process.kill(-pid, signal);
  } catch (e) {
    try {
      process.kill(+pid, signal);
    } catch (e2) {
    }
  }
}
function log(entry) {
  switch (entry.kind) {
    case "cmd":
      if (!entry.verbose)
        return;
      process.stderr.write(formatCmd(entry.cmd));
      break;
    case "stdout":
    case "stderr":
      if (!entry.verbose)
        return;
      process.stderr.write(entry.data);
      break;
    case "cd":
      if (!$.verbose)
        return;
      process.stderr.write("$ " + chalk.greenBright("cd") + ` ${entry.dir}
`);
      break;
    case "fetch":
      if (!$.verbose)
        return;
      const init = entry.init ? " " + inspect(entry.init) : "";
      process.stderr.write(
        "$ " + chalk.greenBright("fetch") + ` ${entry.url}${init}
`
      );
      break;
    case "retry":
      if (!$.verbose)
        return;
      process.stderr.write(entry.error + "\n");
  }
}
export {
  $,
  ProcessOutput,
  ProcessPromise,
  cd,
  defaults,
  kill,
  log,
  syncProcessCwd,
  useBash,
  usePowerShell,
  within
};
